// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const addDummyVectorSegment = `-- name: AddDummyVectorSegment :exec
INSERT INTO segments (id, type, scope,collection) VALUES (?,'urn:chroma:segment/vector/hnsw-local-persisted','VECTOR',?)
RETURNING id, type, scope, collection
`

type AddDummyVectorSegmentParams struct {
	ID         string
	Collection string
}

func (q *Queries) AddDummyVectorSegment(ctx context.Context, arg AddDummyVectorSegmentParams) error {
	_, err := q.db.ExecContext(ctx, addDummyVectorSegment, arg.ID, arg.Collection)
	return err
}

const getSegments = `-- name: GetSegments :many
SELECT id, type, scope, collection FROM segments WHERE scope = 'VECTOR'
`

func (q *Queries) GetSegments(ctx context.Context) ([]Segment, error) {
	rows, err := q.db.QueryContext(ctx, getSegments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Segment
	for rows.Next() {
		var i Segment
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Scope,
			&i.Collection,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
